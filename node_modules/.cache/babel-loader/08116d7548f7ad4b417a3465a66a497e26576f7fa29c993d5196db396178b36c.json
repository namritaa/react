{"ast":null,"code":"var _jsxFileName = \"/Users/namrita.tellapuram/Desktop/react-task/src/components/Kanban/Kanban.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Kanban.scss';\n// const initialData = {\n//   tasks: {\n//     \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n//     \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n//     \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n//     \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n//   },\n//   columns: {\n//     \"column-1\": {\n//       id: \"column-1\",\n//       title: \"To Do\",\n//       taskIds: [\"task-1\", \"task-2\"],\n//     },\n//     \"column-2\": {\n//       id: \"column-2\",\n//       title: \"In Progress\",\n//       taskIds: [\"task-3\"],\n//     },\n//     \"column-3\": {\n//       id: \"column-3\",\n//       title: \"Done\",\n//       taskIds: [\"task-4\"],\n//     },\n//   },\n//   columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n// };\n\n// const Kanban = () => {\n//   const [data, setData] = useState(initialData);\n\n//   const onDragEnd = (result) => {\n//     console.log(result)\n//     const { source, destination, draggableId } = result;\n\n//     if (!destination) return; // If dropped outside a droppable area\n\n//     if (\n//       source.droppableId === destination.droppableId &&\n//       source.index === destination.index\n//     ) {\n//       return; // If dropped in the same position\n//     }\n\n//     const startColumn = data.columns[source.droppableId];\n//     const endColumn = data.columns[destination.droppableId];\n\n//     // Moving within the same column\n//     if (startColumn === endColumn) {\n//       const newTaskIds = Array.from(startColumn.taskIds);\n//       newTaskIds.splice(source.index, 1);\n//       newTaskIds.splice(destination.index, 0, draggableId);\n\n//       const updatedColumn = {\n//         ...startColumn,\n//         taskIds: newTaskIds,\n//       };\n\n//       setData({\n//         ...data,\n//         columns: {\n//           ...data.columns,\n//           [updatedColumn.id]: updatedColumn,\n//         },\n//       });\n\n//       return;\n//     }\n\n//     // Moving to a different column\n//     const startTaskIds = Array.from(startColumn.taskIds);\n//     startTaskIds.splice(source.index, 1);\n//     const updatedStartColumn = {\n//       ...startColumn,\n//       taskIds: startTaskIds,\n//     };\n\n//     const endTaskIds = Array.from(endColumn.taskIds);\n//     endTaskIds.splice(destination.index, 0, draggableId);\n//     const updatedEndColumn = {\n//       ...endColumn,\n//       taskIds: endTaskIds,\n//     };\n\n//     setData({\n//       ...data,\n//       columns: {\n//         ...data.columns,\n//         [updatedStartColumn.id]: updatedStartColumn,\n//         [updatedEndColumn.id]: updatedEndColumn,\n//       },\n//     });\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"full\">\n//         {data.columnOrder.map((columnId) => {\n//           const column = data.columns[columnId];\n//           const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n//           return (\n//             <Droppable droppableId={column.id} key={column.id}>\n//               {(provided) => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     border: \"1px solid lightgray\",\n//                     borderRadius: \"4px\",\n//                     width: \"250px\",\n//                     padding: \"8px\",\n//                     backgroundColor: \"#f7f7f7\",\n//                   }}\n//                 >\n//                   <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n//                   {tasks.map((task, index) => (\n//                     <Draggable\n//                       draggableId={task.id}\n//                       index={index}\n//                       key={task.id}\n//                     >\n//                       {(provided) => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             padding: \"8px\",\n//                             margin: \"4px 0\",\n//                             backgroundColor: \"white\",\n//                             borderRadius: \"4px\",\n//                             boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n//                             ...provided.draggableProps.style,\n//                           }}\n//                         >\n//                           {task.content}\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           );\n\n//         })}\n//       </div>\n//     </DragDropContext>\n//   );\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  tasks: {\n    \"task-1\": {\n      id: \"task-1\",\n      content: \"Task 1\"\n    },\n    \"task-2\": {\n      id: \"task-2\",\n      content: \"Task 2\"\n    },\n    \"task-3\": {\n      id: \"task-3\",\n      content: \"Task 3\"\n    },\n    \"task-4\": {\n      id: \"task-4\",\n      content: \"Task 4\"\n    }\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\"]\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [\"task-3\"]\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: [\"task-4\"]\n    }\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n};\nconst Kanban = () => {\n  _s();\n  const [data, setData] = useState(initialData);\n  const [draggedTaskId, setDraggedTaskId] = useState(null);\n  const handleDragStart = taskId => {\n    console.log(\"Drag started for task:\", taskId);\n    setDraggedTaskId(taskId);\n  };\n  const handleDrop = columnId => {\n    console.log(\"Dropped on column:\", columnId);\n    if (!draggedTaskId) return;\n    const sourceColumn = Object.values(data.columns).find(column => column.taskIds.includes(draggedTaskId));\n    if (!sourceColumn) return;\n    const updatedSourceTaskIds = sourceColumn.taskIds.filter(id => id !== draggedTaskId);\n    const updatedTargetTaskIds = [...data.columns[columnId].taskIds, draggedTaskId];\n    setData({\n      ...data,\n      columns: {\n        ...data.columns,\n        [sourceColumn.id]: {\n          ...sourceColumn,\n          taskIds: updatedSourceTaskIds\n        },\n        [columnId]: {\n          ...data.columns[columnId],\n          taskIds: updatedTargetTaskIds\n        }\n      }\n    });\n    setDraggedTaskId(null); // Reset\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full\",\n    children: data.columnOrder.map(columnId => {\n      const column = data.columns[columnId];\n      const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onDragOver: e => e.preventDefault() // Allows drop\n        ,\n        onDrop: () => handleDrop(column.id),\n        style: {\n          border: \"1px solid lightgray\",\n          borderRadius: \"4px\",\n          width: \"250px\",\n          padding: \"8px\",\n          backgroundColor: \"#f7f7f7\",\n          margin: \"0 10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: column.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n          draggable: true,\n          onDragStart: () => handleDragStart(task.id),\n          style: {\n            padding: \"8px\",\n            margin: \"4px 0\",\n            backgroundColor: \"white\",\n            borderRadius: \"4px\",\n            boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\"\n          },\n          children: task.content\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }, this))]\n      }, column.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(Kanban, \"kRs9cTRVbRsBF2CSzMfZ6MV09vk=\");\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","initialData","tasks","id","content","columns","title","taskIds","columnOrder","Kanban","_s","data","setData","draggedTaskId","setDraggedTaskId","handleDragStart","taskId","console","log","handleDrop","columnId","sourceColumn","Object","values","find","column","includes","updatedSourceTaskIds","filter","updatedTargetTaskIds","className","children","map","onDragOver","e","preventDefault","onDrop","style","border","borderRadius","width","padding","backgroundColor","margin","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","task","draggable","onDragStart","boxShadow","_c","$RefreshReg$"],"sources":["/Users/namrita.tellapuram/Desktop/react-task/src/components/Kanban/Kanban.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Kanban.scss'\n// const initialData = {\n//   tasks: {\n//     \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n//     \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n//     \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n//     \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n//   },\n//   columns: {\n//     \"column-1\": {\n//       id: \"column-1\",\n//       title: \"To Do\",\n//       taskIds: [\"task-1\", \"task-2\"],\n//     },\n//     \"column-2\": {\n//       id: \"column-2\",\n//       title: \"In Progress\",\n//       taskIds: [\"task-3\"],\n//     },\n//     \"column-3\": {\n//       id: \"column-3\",\n//       title: \"Done\",\n//       taskIds: [\"task-4\"],\n//     },\n//   },\n//   columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n// };\n\n// const Kanban = () => {\n//   const [data, setData] = useState(initialData);\n\n//   const onDragEnd = (result) => {\n//     console.log(result)\n//     const { source, destination, draggableId } = result;\n\n//     if (!destination) return; // If dropped outside a droppable area\n\n//     if (\n//       source.droppableId === destination.droppableId &&\n//       source.index === destination.index\n//     ) {\n//       return; // If dropped in the same position\n//     }\n\n//     const startColumn = data.columns[source.droppableId];\n//     const endColumn = data.columns[destination.droppableId];\n\n//     // Moving within the same column\n//     if (startColumn === endColumn) {\n//       const newTaskIds = Array.from(startColumn.taskIds);\n//       newTaskIds.splice(source.index, 1);\n//       newTaskIds.splice(destination.index, 0, draggableId);\n\n//       const updatedColumn = {\n//         ...startColumn,\n//         taskIds: newTaskIds,\n//       };\n\n//       setData({\n//         ...data,\n//         columns: {\n//           ...data.columns,\n//           [updatedColumn.id]: updatedColumn,\n//         },\n//       });\n\n//       return;\n//     }\n\n//     // Moving to a different column\n//     const startTaskIds = Array.from(startColumn.taskIds);\n//     startTaskIds.splice(source.index, 1);\n//     const updatedStartColumn = {\n//       ...startColumn,\n//       taskIds: startTaskIds,\n//     };\n\n//     const endTaskIds = Array.from(endColumn.taskIds);\n//     endTaskIds.splice(destination.index, 0, draggableId);\n//     const updatedEndColumn = {\n//       ...endColumn,\n//       taskIds: endTaskIds,\n//     };\n\n//     setData({\n//       ...data,\n//       columns: {\n//         ...data.columns,\n//         [updatedStartColumn.id]: updatedStartColumn,\n//         [updatedEndColumn.id]: updatedEndColumn,\n//       },\n//     });\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"full\">\n//         {data.columnOrder.map((columnId) => {\n//           const column = data.columns[columnId];\n//           const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n//           return (\n//             <Droppable droppableId={column.id} key={column.id}>\n//               {(provided) => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     border: \"1px solid lightgray\",\n//                     borderRadius: \"4px\",\n//                     width: \"250px\",\n//                     padding: \"8px\",\n//                     backgroundColor: \"#f7f7f7\",\n//                   }}\n//                 >\n//                   <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n//                   {tasks.map((task, index) => (\n//                     <Draggable\n//                       draggableId={task.id}\n//                       index={index}\n//                       key={task.id}\n//                     >\n//                       {(provided) => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             padding: \"8px\",\n//                             margin: \"4px 0\",\n//                             backgroundColor: \"white\",\n//                             borderRadius: \"4px\",\n//                             boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n//                             ...provided.draggableProps.style,\n//                           }}\n//                         >\n//                           {task.content}\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           );\n\n//         })}\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n\nconst initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n    \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n    \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n    \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\"],\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [\"task-3\"],\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: [\"task-4\"],\n    },\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n};\n\nconst Kanban = () => {\n  const [data, setData] = useState(initialData);\n  const [draggedTaskId, setDraggedTaskId] = useState(null);\n\n  const handleDragStart = (taskId) => {\n    console.log(\"Drag started for task:\", taskId);\n    setDraggedTaskId(taskId);\n  };\n\n  const handleDrop = (columnId) => {\n    console.log(\"Dropped on column:\", columnId);\n\n    if (!draggedTaskId) return;\n\n    const sourceColumn = Object.values(data.columns).find((column) =>\n      column.taskIds.includes(draggedTaskId)\n    );\n\n    if (!sourceColumn) return;\n\n    const updatedSourceTaskIds = sourceColumn.taskIds.filter(\n      (id) => id !== draggedTaskId\n    );\n    const updatedTargetTaskIds = [\n      ...data.columns[columnId].taskIds,\n      draggedTaskId,\n    ];\n\n    setData({\n      ...data,\n      columns: {\n        ...data.columns,\n        [sourceColumn.id]: {\n          ...sourceColumn,\n          taskIds: updatedSourceTaskIds,\n        },\n        [columnId]: {\n          ...data.columns[columnId],\n          taskIds: updatedTargetTaskIds,\n        },\n      },\n    });\n    setDraggedTaskId(null); // Reset\n  };\n\n  return (\n    <div className=\"full\">\n      {data.columnOrder.map((columnId) => {\n        const column = data.columns[columnId];\n        const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n        return (\n          <div\n            key={column.id}\n            onDragOver={(e) => e.preventDefault()} // Allows drop\n            onDrop={() => handleDrop(column.id)}\n            style={{\n              border: \"1px solid lightgray\",\n              borderRadius: \"4px\",\n              width: \"250px\",\n              padding: \"8px\",\n              backgroundColor: \"#f7f7f7\",\n              margin: \"0 10px\",\n            }}\n          >\n            <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n            {tasks.map((task) => (\n              <div\n                key={task.id}\n                draggable\n                onDragStart={() => handleDragStart(task.id)}\n                style={{\n                  padding: \"8px\",\n                  margin: \"4px 0\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"4px\",\n                  boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n                }}\n              >\n                {task.content}\n              </div>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Kanban;\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}