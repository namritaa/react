{"ast":null,"code":"var _jsxFileName = \"/Users/namrita.tellapuram/Desktop/react-task/src/components/Kanban/Kanban.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Kanban.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  tasks: {\n    \"task-1\": {\n      id: \"task-1\",\n      content: \"Task 1\"\n    },\n    \"task-2\": {\n      id: \"task-2\",\n      content: \"Task 2\"\n    },\n    \"task-3\": {\n      id: \"task-3\",\n      content: \"Task 3\"\n    },\n    \"task-4\": {\n      id: \"task-4\",\n      content: \"Task 4\"\n    },\n    \"task-5\": {\n      id: \"task-5\",\n      content: \"Task 5\"\n    }\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\"]\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [\"task-3\"]\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Blocked\",\n      taskIds: [\"task-4\"]\n    },\n    \"column-4\": {\n      id: \"column-4\",\n      title: \"Done\",\n      taskIds: [\"task-5\"]\n    }\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\", \"column-4\"]\n};\nconst Kanban = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [data, setData] = useState(initialData);\n  const onDragEnd = result => {\n    console.log(result);\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n    if (!destination) return; // If dropped outside a droppable area\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return; // If dropped in the same position\n    }\n    const startColumn = data.columns[source.droppableId];\n    const endColumn = data.columns[destination.droppableId];\n\n    // Moving within the same column\n    if (startColumn === endColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const updatedColumn = {\n        ...startColumn,\n        taskIds: newTaskIds\n      };\n      setData({\n        ...data,\n        columns: {\n          ...data.columns,\n          [updatedColumn.id]: updatedColumn\n        }\n      });\n      return;\n    }\n\n    // Moving to a different column\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const updatedStartColumn = {\n      ...startColumn,\n      taskIds: startTaskIds\n    };\n    const endTaskIds = Array.from(endColumn.taskIds);\n    endTaskIds.splice(destination.index, 0, draggableId);\n    const updatedEndColumn = {\n      ...endColumn,\n      taskIds: endTaskIds\n    };\n    setData({\n      ...data,\n      columns: {\n        ...data.columns,\n        [updatedStartColumn.id]: updatedStartColumn,\n        [updatedEndColumn.id]: updatedEndColumn\n      }\n    });\n  };\n  const Kanban = () => {\n    _s();\n    const [data, setData] = useState(initialData);\n    const handleTaskChange = (taskId, newContent, field = 'content') => {\n      const updatedTasks = {\n        ...data.tasks\n      };\n      updatedTasks[taskId] = {\n        ...updatedTasks[taskId],\n        [field]: newContent\n      };\n      setData({\n        ...data,\n        tasks: updatedTasks\n      });\n    };\n    const handleTaskUpdate = (taskId, updatedTask) => {\n      const updatedTasks = {\n        ...data.tasks\n      };\n      updatedTasks[taskId] = updatedTask;\n      setData({\n        ...data,\n        tasks: updatedTasks\n      });\n    };\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full\",\n        children: data.columnOrder.map(columnId => {\n          const column = data.columns[columnId];\n          const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n          return /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: column.id,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ...provided.droppableProps,\n              ref: provided.innerRef,\n              style: {\n                border: \"1px solid lightgray\",\n                borderRadius: \"4px\",\n                width: \"250px\",\n                padding: \"8px\",\n                backgroundColor: \"#f7f7f7\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                style: {\n                  textAlign: \"center\"\n                },\n                children: column.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 21\n              }, this), tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: task.id,\n                index: index,\n                children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: provided.innerRef,\n                  ...provided.draggableProps,\n                  ...provided.dragHandleProps,\n                  style: {\n                    padding: \"8px\",\n                    margin: \"4px 0\",\n                    backgroundColor: \"white\",\n                    borderRadius: \"4px\",\n                    boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n                    ...provided.draggableProps.style\n                  },\n                  children: task.image ? /*#__PURE__*/_jsxDEV(TaskWithImage, {\n                    task: task,\n                    onChange: handleTaskChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 31\n                  }, this) : task.checklist ? /*#__PURE__*/_jsxDEV(TaskWithChecklist, {\n                    task: task,\n                    onChange: handleTaskUpdate\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 31\n                  }, this) : /*#__PURE__*/_jsxDEV(EditableTask, {\n                    task: task,\n                    onChange: handleTaskChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 27\n                }, this)\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 23\n              }, this)), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this)\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  };\n  _s(Kanban, \"hDGcfQHkZj5ZsEBk8saO8jx9VfY=\");\n};\n\n// const initialData = {\n//   tasks: {\n//     \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n//     \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n//     \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n//     \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n//   },\n//   columns: {\n//     \"column-1\": {\n//       id: \"column-1\",\n//       title: \"To Do\",\n//       taskIds: [\"task-1\", \"task-2\"],\n//     },\n//     \"column-2\": {\n//       id: \"column-2\",\n//       title: \"In Progress\",\n//       taskIds: [\"task-3\"],\n//     },\n//     \"column-3\": {\n//       id: \"column-3\",\n//       title: \"Done\",\n//       taskIds: [\"task-4\"],\n//     },\n//   },\n//   columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n// };\n\n// const Kanban = () => {\n//   const [data, setData] = useState(initialData);\n//   const [draggedTaskId, setDraggedTaskId] = useState(null);\n\n//   const handleDragStart = (e,taskId) => {\n//     e.preventDefault();\n//     console.log(\"Drag started for task:\", taskId);\n//     setDraggedTaskId(taskId);\n//   };\n\n//   const handleDrop = (columnId) => {\n//     console.log(\"Dropped on column:\", columnId);\n\n//     if (!draggedTaskId) return;\n\n//     const sourceColumn = Object.values(data.columns).find((column) =>\n//       column.taskIds.includes(draggedTaskId)\n//     );\n\n//     if (!sourceColumn) return;\n\n//     const updatedSourceTaskIds = sourceColumn.taskIds.filter(\n//       (id) => id !== draggedTaskId\n//     );\n//     const updatedTargetTaskIds = [\n//       ...data.columns[columnId].taskIds,\n//       draggedTaskId,\n//     ];\n\n//     setData({\n//       ...data,\n//       columns: {\n//         ...data.columns,\n//         [sourceColumn.id]: {\n//           ...sourceColumn,\n//           taskIds: updatedSourceTaskIds,\n//         },\n//         [columnId]: {\n//           ...data.columns[columnId],\n//           taskIds: updatedTargetTaskIds,\n//         },\n//       },\n//     });\n//     setDraggedTaskId(null); // Reset\n//   };\n\n//   return (\n//     <div className=\"full\">\n//       {data.columnOrder.map((columnId) => {\n//         const column = data.columns[columnId];\n//         const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n//         return (\n//           <div\n//             key={column.id}\n//             onDragOver={(e) => e.preventDefault()} // Allows drop\n//             onDrop={() => handleDrop(column.id)}\n//             style={{\n//               border: \"1px solid lightgray\",\n//               borderRadius: \"4px\",\n//               width: \"250px\",\n//               padding: \"8px\",\n//               backgroundColor: \"#f7f7f7\",\n//               margin: \"0 10px\",\n//             }}\n//           >\n//             <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n//             {tasks.map((task) => (\n//               <div\n//                 key={task.id}\n//                 draggable\n//                 onDragStart={() => handleDragStart(task.id)}\n//                 style={{\n//                   padding: \"8px\",\n//                   margin: \"4px 0\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"4px\",\n//                   boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n//                 }}\n//               >\n//                 {task.content}\n//               </div>\n//             ))}\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// };\n_s2(Kanban, \"hDGcfQHkZj5ZsEBk8saO8jx9VfY=\");\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","initialData","tasks","id","content","columns","title","taskIds","columnOrder","Kanban","_s2","_s","$RefreshSig$","data","setData","onDragEnd","result","console","log","source","destination","draggableId","droppableId","index","startColumn","endColumn","newTaskIds","Array","from","splice","updatedColumn","startTaskIds","updatedStartColumn","endTaskIds","updatedEndColumn","handleTaskChange","taskId","newContent","field","updatedTasks","handleTaskUpdate","updatedTask","children","className","map","columnId","column","provided","droppableProps","ref","innerRef","style","border","borderRadius","width","padding","backgroundColor","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","task","draggableProps","dragHandleProps","margin","boxShadow","image","TaskWithImage","onChange","checklist","TaskWithChecklist","EditableTask","placeholder","_c","$RefreshReg$"],"sources":["/Users/namrita.tellapuram/Desktop/react-task/src/components/Kanban/Kanban.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Kanban.scss'\nconst initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n    \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n    \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n    \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n    \"task-5\": { id: \"task-5\", content: \"Task 5\" },\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\"],\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [\"task-3\"],\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Blocked\",\n      taskIds: [\"task-4\"],\n    },\n    \"column-4\": {\n      id: \"column-4\",\n      title: \"Done\",\n      taskIds: [\"task-5\"],\n    },\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\",\"column-4\"],\n};\n\nconst Kanban = () => {\n  const [data, setData] = useState(initialData);\n\n  const onDragEnd = (result) => {\n    console.log(result)\n    const { source, destination, draggableId } = result;\n\n    if (!destination) return; // If dropped outside a droppable area\n\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return; // If dropped in the same position\n    }\n\n    const startColumn = data.columns[source.droppableId];\n    const endColumn = data.columns[destination.droppableId];\n\n    // Moving within the same column\n    if (startColumn === endColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const updatedColumn = {\n        ...startColumn,\n        taskIds: newTaskIds,\n      };\n\n      setData({\n        ...data,\n        columns: {\n          ...data.columns,\n          [updatedColumn.id]: updatedColumn,\n        },\n      });\n\n      return;\n    }\n\n    // Moving to a different column\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const updatedStartColumn = {\n      ...startColumn,\n      taskIds: startTaskIds,\n    };\n\n    const endTaskIds = Array.from(endColumn.taskIds);\n    endTaskIds.splice(destination.index, 0, draggableId);\n    const updatedEndColumn = {\n      ...endColumn,\n      taskIds: endTaskIds,\n    };\n\n    setData({\n      ...data,\n      columns: {\n        ...data.columns,\n        [updatedStartColumn.id]: updatedStartColumn,\n        [updatedEndColumn.id]: updatedEndColumn,\n      },\n    });\n  };\n\n  const Kanban = () => {\n    const [data, setData] = useState(initialData);\n  \n    const handleTaskChange = (taskId, newContent, field = 'content') => {\n      const updatedTasks = { ...data.tasks };\n      updatedTasks[taskId] = { ...updatedTasks[taskId], [field]: newContent };\n      setData({\n        ...data,\n        tasks: updatedTasks,\n      });\n    };\n  \n    const handleTaskUpdate = (taskId, updatedTask) => {\n      const updatedTasks = { ...data.tasks };\n      updatedTasks[taskId] = updatedTask;\n      setData({\n        ...data,\n        tasks: updatedTasks,\n      });\n    };\n  \n    return (\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div className=\"full\">\n          {data.columnOrder.map((columnId) => {\n            const column = data.columns[columnId];\n            const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n  \n            return (\n              <Droppable droppableId={column.id} key={column.id}>\n                {(provided) => (\n                  <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    style={{\n                      border: \"1px solid lightgray\",\n                      borderRadius: \"4px\",\n                      width: \"250px\",\n                      padding: \"8px\",\n                      backgroundColor: \"#f7f7f7\",\n                    }}\n                  >\n                    <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n                    {tasks.map((task, index) => (\n                      <Draggable\n                        draggableId={task.id}\n                        index={index}\n                        key={task.id}\n                      >\n                        {(provided) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={{\n                              padding: \"8px\",\n                              margin: \"4px 0\",\n                              backgroundColor: \"white\",\n                              borderRadius: \"4px\",\n                              boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n                              ...provided.draggableProps.style,\n                            }}\n                          >\n                            {/* Conditional rendering of tasks */}\n                            {task.image ? (\n                              <TaskWithImage task={task} onChange={handleTaskChange} />\n                            ) : task.checklist ? (\n                              <TaskWithChecklist task={task} onChange={handleTaskUpdate} />\n                            ) : (\n                              <EditableTask task={task} onChange={handleTaskChange} />\n                            )}\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            );\n          })}\n        </div>\n      </DragDropContext>\n    );\n  };\n  \n};\n\n\n// const initialData = {\n//   tasks: {\n//     \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n//     \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n//     \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n//     \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n//   },\n//   columns: {\n//     \"column-1\": {\n//       id: \"column-1\",\n//       title: \"To Do\",\n//       taskIds: [\"task-1\", \"task-2\"],\n//     },\n//     \"column-2\": {\n//       id: \"column-2\",\n//       title: \"In Progress\",\n//       taskIds: [\"task-3\"],\n//     },\n//     \"column-3\": {\n//       id: \"column-3\",\n//       title: \"Done\",\n//       taskIds: [\"task-4\"],\n//     },\n//   },\n//   columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n// };\n\n// const Kanban = () => {\n//   const [data, setData] = useState(initialData);\n//   const [draggedTaskId, setDraggedTaskId] = useState(null);\n\n//   const handleDragStart = (e,taskId) => {\n//     e.preventDefault();\n//     console.log(\"Drag started for task:\", taskId);\n//     setDraggedTaskId(taskId);\n//   };\n\n//   const handleDrop = (columnId) => {\n//     console.log(\"Dropped on column:\", columnId);\n\n//     if (!draggedTaskId) return;\n\n//     const sourceColumn = Object.values(data.columns).find((column) =>\n//       column.taskIds.includes(draggedTaskId)\n//     );\n\n//     if (!sourceColumn) return;\n\n//     const updatedSourceTaskIds = sourceColumn.taskIds.filter(\n//       (id) => id !== draggedTaskId\n//     );\n//     const updatedTargetTaskIds = [\n//       ...data.columns[columnId].taskIds,\n//       draggedTaskId,\n//     ];\n\n//     setData({\n//       ...data,\n//       columns: {\n//         ...data.columns,\n//         [sourceColumn.id]: {\n//           ...sourceColumn,\n//           taskIds: updatedSourceTaskIds,\n//         },\n//         [columnId]: {\n//           ...data.columns[columnId],\n//           taskIds: updatedTargetTaskIds,\n//         },\n//       },\n//     });\n//     setDraggedTaskId(null); // Reset\n//   };\n\n//   return (\n//     <div className=\"full\">\n//       {data.columnOrder.map((columnId) => {\n//         const column = data.columns[columnId];\n//         const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n//         return (\n//           <div\n//             key={column.id}\n//             onDragOver={(e) => e.preventDefault()} // Allows drop\n//             onDrop={() => handleDrop(column.id)}\n//             style={{\n//               border: \"1px solid lightgray\",\n//               borderRadius: \"4px\",\n//               width: \"250px\",\n//               padding: \"8px\",\n//               backgroundColor: \"#f7f7f7\",\n//               margin: \"0 10px\",\n//             }}\n//           >\n//             <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n//             {tasks.map((task) => (\n//               <div\n//                 key={task.id}\n//                 draggable\n//                 onDragStart={() => handleDragStart(task.id)}\n//                 style={{\n//                   padding: \"8px\",\n//                   margin: \"4px 0\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"4px\",\n//                   boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n//                 }}\n//               >\n//                 {task.content}\n//               </div>\n//             ))}\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// };\n\nexport default Kanban;\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}