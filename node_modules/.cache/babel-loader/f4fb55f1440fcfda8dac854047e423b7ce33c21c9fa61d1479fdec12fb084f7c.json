{"ast":null,"code":"var _jsxFileName = \"/Users/namrita.tellapuram/Desktop/react-task/src/components/MyComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  tasks: {\n    \"task-1\": {\n      id: \"task-1\",\n      content: \"Task 1\"\n    },\n    \"task-2\": {\n      id: \"task-2\",\n      content: \"Task 2\"\n    },\n    \"task-3\": {\n      id: \"task-3\",\n      content: \"Task 3\"\n    },\n    \"task-4\": {\n      id: \"task-4\",\n      content: \"Task 4\"\n    }\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\"]\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [\"task-3\"]\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: [\"task-4\"]\n    }\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n};\nconst KanbanBoard = () => {\n  _s();\n  const [data, setData] = useState(initialData);\n  const onDragEnd = result => {\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n    if (!destination) return; // If dropped outside a droppable area\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return; // If dropped in the same position\n    }\n    const startColumn = data.columns[source.droppableId];\n    const endColumn = data.columns[destination.droppableId];\n\n    // Moving within the same column\n    if (startColumn === endColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const updatedColumn = {\n        ...startColumn,\n        taskIds: newTaskIds\n      };\n      setData({\n        ...data,\n        columns: {\n          ...data.columns,\n          [updatedColumn.id]: updatedColumn\n        }\n      });\n      return;\n    }\n\n    // Moving to a different column\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const updatedStartColumn = {\n      ...startColumn,\n      taskIds: startTaskIds\n    };\n    const endTaskIds = Array.from(endColumn.taskIds);\n    endTaskIds.splice(destination.index, 0, draggableId);\n    const updatedEndColumn = {\n      ...endColumn,\n      taskIds: endTaskIds\n    };\n    setData({\n      ...data,\n      columns: {\n        ...data.columns,\n        [updatedStartColumn.id]: updatedStartColumn,\n        [updatedEndColumn.id]: updatedEndColumn\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"16px\"\n      },\n      children: data.columnOrder.map(columnId => {\n        const column = data.columns[columnId];\n        const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n        return /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: column.id,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            style: {\n              border: \"1px solid lightgray\",\n              borderRadius: \"4px\",\n              width: \"250px\",\n              padding: \"8px\",\n              backgroundColor: \"#f7f7f7\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                textAlign: \"center\"\n              },\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this), tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: {\n                  padding: \"8px\",\n                  margin: \"4px 0\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"4px\",\n                  boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n                  ...provided.draggableProps.style\n                },\n                children: task.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 25\n              }, this)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 21\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)\n        }, column.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"hDGcfQHkZj5ZsEBk8saO8jx9VfY=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","initialData","tasks","id","content","columns","title","taskIds","columnOrder","KanbanBoard","_s","data","setData","onDragEnd","result","source","destination","draggableId","droppableId","index","startColumn","endColumn","newTaskIds","Array","from","splice","updatedColumn","startTaskIds","updatedStartColumn","endTaskIds","updatedEndColumn","children","style","display","gap","map","columnId","column","taskId","provided","droppableProps","ref","innerRef","border","borderRadius","width","padding","backgroundColor","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","task","draggableProps","dragHandleProps","margin","boxShadow","placeholder","_c","$RefreshReg$"],"sources":["/Users/namrita.tellapuram/Desktop/react-task/src/components/MyComponent.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n    \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n    \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n    \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\"],\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [\"task-3\"],\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: [\"task-4\"],\n    },\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n};\n\nconst KanbanBoard = () => {\n  const [data, setData] = useState(initialData);\n\n  const onDragEnd = (result) => {\n    const { source, destination, draggableId } = result;\n\n    if (!destination) return; // If dropped outside a droppable area\n\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return; // If dropped in the same position\n    }\n\n    const startColumn = data.columns[source.droppableId];\n    const endColumn = data.columns[destination.droppableId];\n\n    // Moving within the same column\n    if (startColumn === endColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const updatedColumn = {\n        ...startColumn,\n        taskIds: newTaskIds,\n      };\n\n      setData({\n        ...data,\n        columns: {\n          ...data.columns,\n          [updatedColumn.id]: updatedColumn,\n        },\n      });\n\n      return;\n    }\n\n    // Moving to a different column\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const updatedStartColumn = {\n      ...startColumn,\n      taskIds: startTaskIds,\n    };\n\n    const endTaskIds = Array.from(endColumn.taskIds);\n    endTaskIds.splice(destination.index, 0, draggableId);\n    const updatedEndColumn = {\n      ...endColumn,\n      taskIds: endTaskIds,\n    };\n\n    setData({\n      ...data,\n      columns: {\n        ...data.columns,\n        [updatedStartColumn.id]: updatedStartColumn,\n        [updatedEndColumn.id]: updatedEndColumn,\n      },\n    });\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div style={{ display: \"flex\", gap: \"16px\" }}>\n        {data.columnOrder.map((columnId) => {\n          const column = data.columns[columnId];\n          const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n          return (\n            <Droppable droppableId={column.id} key={column.id}>\n              {(provided) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    border: \"1px solid lightgray\",\n                    borderRadius: \"4px\",\n                    width: \"250px\",\n                    padding: \"8px\",\n                    backgroundColor: \"#f7f7f7\",\n                  }}\n                >\n                  <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n                  {tasks.map((task, index) => (\n                    <Draggable\n                      draggableId={task.id}\n                      index={index}\n                      key={task.id}\n                    >\n                      {(provided) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={{\n                            padding: \"8px\",\n                            margin: \"4px 0\",\n                            backgroundColor: \"white\",\n                            borderRadius: \"4px\",\n                            boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n                            ...provided.draggableProps.style,\n                          }}\n                        >\n                          {task.content}\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          );\n        })}\n      </div>\n    </DragDropContext>\n  );\n};\n\nexport default KanbanBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}