{"ast":null,"code":"var _jsxFileName = \"/Users/namrita.tellapuram/Desktop/react-task/src/components/Kanban/Kanban.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Kanban.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  tasks: {\n    \"task-1\": {\n      id: \"task-1\",\n      content: \"Task 1\",\n      image: \"https://via.placeholder.com/150\"\n    },\n    \"task-2\": {\n      id: \"task-2\",\n      content: \"Task 2\",\n      checklist: [{\n        text: \"Item 1\",\n        checked: false\n      }, {\n        text: \"Item 2\",\n        checked: false\n      }]\n    },\n    \"task-3\": {\n      id: \"task-3\",\n      content: \"Task 3\"\n    },\n    \"task-4\": {\n      id: \"task-4\",\n      content: \"Task 4\"\n    }\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\"]\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [\"task-3\"]\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: [\"task-4\"]\n    }\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n};\nconst Kanban = () => {\n  _s();\n  const [data, setData] = useState(initialData);\n  const onDragEnd = result => {\n    console.log(result);\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n    if (!destination) return; // If dropped outside a droppable area\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return; // If dropped in the same position\n    }\n    const startColumn = data.columns[source.droppableId];\n    const endColumn = data.columns[destination.droppableId];\n\n    // Moving within the same column\n    if (startColumn === endColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const updatedColumn = {\n        ...startColumn,\n        taskIds: newTaskIds\n      };\n      setData({\n        ...data,\n        columns: {\n          ...data.columns,\n          [updatedColumn.id]: updatedColumn\n        }\n      });\n      return;\n    }\n\n    // Moving to a different column\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const updatedStartColumn = {\n      ...startColumn,\n      taskIds: startTaskIds\n    };\n    const endTaskIds = Array.from(endColumn.taskIds);\n    endTaskIds.splice(destination.index, 0, draggableId);\n    const updatedEndColumn = {\n      ...endColumn,\n      taskIds: endTaskIds\n    };\n    setData({\n      ...data,\n      columns: {\n        ...data.columns,\n        [updatedStartColumn.id]: updatedStartColumn,\n        [updatedEndColumn.id]: updatedEndColumn\n      }\n    });\n  };\n  const handleTaskChange = (taskId, newContent, field = 'content') => {\n    const updatedTasks = {\n      ...data.tasks\n    };\n    updatedTasks[taskId] = {\n      ...updatedTasks[taskId],\n      [field]: newContent\n    };\n    setData({\n      ...data,\n      tasks: updatedTasks\n    });\n  };\n  const handleTaskUpdate = (taskId, updatedTask) => {\n    const updatedTasks = {\n      ...data.tasks\n    };\n    updatedTasks[taskId] = updatedTask;\n    setData({\n      ...data,\n      tasks: updatedTasks\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full\",\n      children: data.columnOrder.map(columnId => {\n        const column = data.columns[columnId];\n        const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n        return /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: column.id,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            style: {\n              border: \"1px solid lightgray\",\n              borderRadius: \"4px\",\n              width: \"250px\",\n              padding: \"8px\",\n              backgroundColor: \"#f7f7f7\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                textAlign: \"center\"\n              },\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 19\n            }, this), tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: {\n                  padding: \"8px\",\n                  margin: \"4px 0\",\n                  backgroundColor: \"white\",\n                  borderRadius: \"4px\",\n                  boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n                  ...provided.draggableProps.style\n                },\n                children: task.image ? /*#__PURE__*/_jsxDEV(TaskWithImage, {\n                  task: task,\n                  onChange: handleTaskChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 29\n                }, this) : task.checklist ? /*#__PURE__*/_jsxDEV(TaskWithChecklist, {\n                  task: task,\n                  onChange: handleTaskUpdate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 29\n                }, this) : /*#__PURE__*/_jsxDEV(EditableTask, {\n                  task: task,\n                  onChange: handleTaskChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 25\n              }, this)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 21\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this)\n        }, column.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n// const initialData = {\n//   tasks: {\n//     \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n//     \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n//     \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n//     \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n//   },\n//   columns: {\n//     \"column-1\": {\n//       id: \"column-1\",\n//       title: \"To Do\",\n//       taskIds: [\"task-1\", \"task-2\"],\n//     },\n//     \"column-2\": {\n//       id: \"column-2\",\n//       title: \"In Progress\",\n//       taskIds: [\"task-3\"],\n//     },\n//     \"column-3\": {\n//       id: \"column-3\",\n//       title: \"Done\",\n//       taskIds: [\"task-4\"],\n//     },\n//   },\n//   columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n// };\n\n// const Kanban = () => {\n//   const [data, setData] = useState(initialData);\n//   const [draggedTaskId, setDraggedTaskId] = useState(null);\n\n//   const handleDragStart = (e,taskId) => {\n//     e.preventDefault();\n//     console.log(\"Drag started for task:\", taskId);\n//     setDraggedTaskId(taskId);\n//   };\n\n//   const handleDrop = (columnId) => {\n//     console.log(\"Dropped on column:\", columnId);\n\n//     if (!draggedTaskId) return;\n\n//     const sourceColumn = Object.values(data.columns).find((column) =>\n//       column.taskIds.includes(draggedTaskId)\n//     );\n\n//     if (!sourceColumn) return;\n\n//     const updatedSourceTaskIds = sourceColumn.taskIds.filter(\n//       (id) => id !== draggedTaskId\n//     );\n//     const updatedTargetTaskIds = [\n//       ...data.columns[columnId].taskIds,\n//       draggedTaskId,\n//     ];\n\n//     setData({\n//       ...data,\n//       columns: {\n//         ...data.columns,\n//         [sourceColumn.id]: {\n//           ...sourceColumn,\n//           taskIds: updatedSourceTaskIds,\n//         },\n//         [columnId]: {\n//           ...data.columns[columnId],\n//           taskIds: updatedTargetTaskIds,\n//         },\n//       },\n//     });\n//     setDraggedTaskId(null); // Reset\n//   };\n\n//   return (\n//     <div className=\"full\">\n//       {data.columnOrder.map((columnId) => {\n//         const column = data.columns[columnId];\n//         const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n//         return (\n//           <div\n//             key={column.id}\n//             onDragOver={(e) => e.preventDefault()} // Allows drop\n//             onDrop={() => handleDrop(column.id)}\n//             style={{\n//               border: \"1px solid lightgray\",\n//               borderRadius: \"4px\",\n//               width: \"250px\",\n//               padding: \"8px\",\n//               backgroundColor: \"#f7f7f7\",\n//               margin: \"0 10px\",\n//             }}\n//           >\n//             <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n//             {tasks.map((task) => (\n//               <div\n//                 key={task.id}\n//                 draggable\n//                 onDragStart={() => handleDragStart(task.id)}\n//                 style={{\n//                   padding: \"8px\",\n//                   margin: \"4px 0\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"4px\",\n//                   boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n//                 }}\n//               >\n//                 {task.content}\n//               </div>\n//             ))}\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// };\n_s(Kanban, \"hDGcfQHkZj5ZsEBk8saO8jx9VfY=\");\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","initialData","tasks","id","content","image","checklist","text","checked","columns","title","taskIds","columnOrder","Kanban","_s","data","setData","onDragEnd","result","console","log","source","destination","draggableId","droppableId","index","startColumn","endColumn","newTaskIds","Array","from","splice","updatedColumn","startTaskIds","updatedStartColumn","endTaskIds","updatedEndColumn","handleTaskChange","taskId","newContent","field","updatedTasks","handleTaskUpdate","updatedTask","children","className","map","columnId","column","provided","droppableProps","ref","innerRef","style","border","borderRadius","width","padding","backgroundColor","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","task","draggableProps","dragHandleProps","margin","boxShadow","TaskWithImage","onChange","TaskWithChecklist","EditableTask","placeholder","_c","$RefreshReg$"],"sources":["/Users/namrita.tellapuram/Desktop/react-task/src/components/Kanban/Kanban.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './Kanban.scss'\n\nconst initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Task 1\", image: \"https://via.placeholder.com/150\" },\n    \"task-2\": { id: \"task-2\", content: \"Task 2\", checklist: [{ text: \"Item 1\", checked: false }, { text: \"Item 2\", checked: false }] },\n    \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n    \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [\"task-1\", \"task-2\"],\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [\"task-3\"],\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: [\"task-4\"],\n    },\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n};\n\n\nconst Kanban = () => {\n  const [data, setData] = useState(initialData);\n\n  const onDragEnd = (result) => {\n    console.log(result)\n    const { source, destination, draggableId } = result;\n\n    if (!destination) return; // If dropped outside a droppable area\n\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return; // If dropped in the same position\n    }\n\n    const startColumn = data.columns[source.droppableId];\n    const endColumn = data.columns[destination.droppableId];\n\n    // Moving within the same column\n    if (startColumn === endColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const updatedColumn = {\n        ...startColumn,\n        taskIds: newTaskIds,\n      };\n\n      setData({\n        ...data,\n        columns: {\n          ...data.columns,\n          [updatedColumn.id]: updatedColumn,\n        },\n      });\n\n      return;\n    }\n\n    // Moving to a different column\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const updatedStartColumn = {\n      ...startColumn,\n      taskIds: startTaskIds,\n    };\n\n    const endTaskIds = Array.from(endColumn.taskIds);\n    endTaskIds.splice(destination.index, 0, draggableId);\n    const updatedEndColumn = {\n      ...endColumn,\n      taskIds: endTaskIds,\n    };\n\n    setData({\n      ...data,\n      columns: {\n        ...data.columns,\n        [updatedStartColumn.id]: updatedStartColumn,\n        [updatedEndColumn.id]: updatedEndColumn,\n      },\n    });\n  };\n\n  const handleTaskChange = (taskId, newContent, field = 'content') => {\n    const updatedTasks = { ...data.tasks };\n    updatedTasks[taskId] = { ...updatedTasks[taskId], [field]: newContent };\n    setData({\n      ...data,\n      tasks: updatedTasks,\n    });\n  };\n\n  const handleTaskUpdate = (taskId, updatedTask) => {\n    const updatedTasks = { ...data.tasks };\n    updatedTasks[taskId] = updatedTask;\n    setData({\n      ...data,\n      tasks: updatedTasks,\n    });\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"full\">\n        {data.columnOrder.map((columnId) => {\n          const column = data.columns[columnId];\n          const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n          return (\n            <Droppable droppableId={column.id} key={column.id}>\n              {(provided) => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    border: \"1px solid lightgray\",\n                    borderRadius: \"4px\",\n                    width: \"250px\",\n                    padding: \"8px\",\n                    backgroundColor: \"#f7f7f7\",\n                  }}\n                >\n                  <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n                  {tasks.map((task, index) => (\n                    <Draggable\n                      draggableId={task.id}\n                      index={index}\n                      key={task.id}\n                    >\n                      {(provided) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={{\n                            padding: \"8px\",\n                            margin: \"4px 0\",\n                            backgroundColor: \"white\",\n                            borderRadius: \"4px\",\n                            boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n                            ...provided.draggableProps.style,\n                          }}\n                        >\n                          {/* Conditional rendering of tasks */}\n                          {task.image ? (\n                            <TaskWithImage task={task} onChange={handleTaskChange} />\n                          ) : task.checklist ? (\n                            <TaskWithChecklist task={task} onChange={handleTaskUpdate} />\n                          ) : (\n                            <EditableTask task={task} onChange={handleTaskChange} />\n                          )}\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          );\n        })}\n      </div>\n    </DragDropContext>\n  );\n};\n  \n\n\n\n// const initialData = {\n//   tasks: {\n//     \"task-1\": { id: \"task-1\", content: \"Task 1\" },\n//     \"task-2\": { id: \"task-2\", content: \"Task 2\" },\n//     \"task-3\": { id: \"task-3\", content: \"Task 3\" },\n//     \"task-4\": { id: \"task-4\", content: \"Task 4\" },\n//   },\n//   columns: {\n//     \"column-1\": {\n//       id: \"column-1\",\n//       title: \"To Do\",\n//       taskIds: [\"task-1\", \"task-2\"],\n//     },\n//     \"column-2\": {\n//       id: \"column-2\",\n//       title: \"In Progress\",\n//       taskIds: [\"task-3\"],\n//     },\n//     \"column-3\": {\n//       id: \"column-3\",\n//       title: \"Done\",\n//       taskIds: [\"task-4\"],\n//     },\n//   },\n//   columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n// };\n\n// const Kanban = () => {\n//   const [data, setData] = useState(initialData);\n//   const [draggedTaskId, setDraggedTaskId] = useState(null);\n\n//   const handleDragStart = (e,taskId) => {\n//     e.preventDefault();\n//     console.log(\"Drag started for task:\", taskId);\n//     setDraggedTaskId(taskId);\n//   };\n\n//   const handleDrop = (columnId) => {\n//     console.log(\"Dropped on column:\", columnId);\n\n//     if (!draggedTaskId) return;\n\n//     const sourceColumn = Object.values(data.columns).find((column) =>\n//       column.taskIds.includes(draggedTaskId)\n//     );\n\n//     if (!sourceColumn) return;\n\n//     const updatedSourceTaskIds = sourceColumn.taskIds.filter(\n//       (id) => id !== draggedTaskId\n//     );\n//     const updatedTargetTaskIds = [\n//       ...data.columns[columnId].taskIds,\n//       draggedTaskId,\n//     ];\n\n//     setData({\n//       ...data,\n//       columns: {\n//         ...data.columns,\n//         [sourceColumn.id]: {\n//           ...sourceColumn,\n//           taskIds: updatedSourceTaskIds,\n//         },\n//         [columnId]: {\n//           ...data.columns[columnId],\n//           taskIds: updatedTargetTaskIds,\n//         },\n//       },\n//     });\n//     setDraggedTaskId(null); // Reset\n//   };\n\n//   return (\n//     <div className=\"full\">\n//       {data.columnOrder.map((columnId) => {\n//         const column = data.columns[columnId];\n//         const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n//         return (\n//           <div\n//             key={column.id}\n//             onDragOver={(e) => e.preventDefault()} // Allows drop\n//             onDrop={() => handleDrop(column.id)}\n//             style={{\n//               border: \"1px solid lightgray\",\n//               borderRadius: \"4px\",\n//               width: \"250px\",\n//               padding: \"8px\",\n//               backgroundColor: \"#f7f7f7\",\n//               margin: \"0 10px\",\n//             }}\n//           >\n//             <h3 style={{ textAlign: \"center\" }}>{column.title}</h3>\n//             {tasks.map((task) => (\n//               <div\n//                 key={task.id}\n//                 draggable\n//                 onDragStart={() => handleDragStart(task.id)}\n//                 style={{\n//                   padding: \"8px\",\n//                   margin: \"4px 0\",\n//                   backgroundColor: \"white\",\n//                   borderRadius: \"4px\",\n//                   boxShadow: \"0 1px 3px rgba(0,0,0,0.2)\",\n//                 }}\n//               >\n//                 {task.content}\n//               </div>\n//             ))}\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// };\n\nexport default Kanban;\n\n\n\n\n"],"mappings":"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;gBAAAC,YAAA;cAAA,OACE;YACN,GAzBIC,IAAI,CAAC7D,EAAE;cAAAyD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA0BH,CACZ,CAAC,EACDd,QAAQ,CAACwB,WAAW;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClB;QACN,GAhDqCf,MAAM,CAAC7C,EAAE;UAAAyD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiDtC,CAAC;MAEhB,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEtB,CAAC;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAjD,EAAA,CA3QMD,MAAM;AAAA6D,EAAA,GAAN7D,MAAM;AA6QZ,eAAeA,MAAM;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}